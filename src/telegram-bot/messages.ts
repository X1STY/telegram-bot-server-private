import { pathToImageFolder } from '@/constants';
import TelegramBot from 'node-telegram-bot-api';
import { MainMenu } from './markups';

interface IMessage {
  bot: TelegramBot;
  call: TelegramBot.CallbackQuery;
  message: string;
  keyboard?: TelegramBot.InlineKeyboardMarkup;
  photo?: string | Buffer;
  canPreviousMessageBeDeleted?: boolean;
}

export const sendToUser = async ({
  bot,
  call,
  message,
  keyboard,
  photo,
  canPreviousMessageBeDeleted = true
}: IMessage) => {
  if (photo) {
    await bot.sendPhoto(
      call.message.chat.id,
      photo,
      {
        reply_markup: keyboard,
        caption: message
      },
      {
        contentType: 'image/png'
      }
    );
  } else {
    await bot.sendMessage(call.message.chat.id, message, {
      reply_markup: keyboard
    });
  }
  if (canPreviousMessageBeDeleted) {
    try {
      await bot.deleteMessage(call.message.chat.id, call.message.message_id);
    } catch (error) {
      console.log(
        call.message.chat.id +
          ' | ' +
          call.from.username +
          ' | ' +
          call.data +
          ' | ' +
          error.message
      );
      if (call.data.startsWith('book_') || call.data.startsWith('rent_for_event_')) {
        throw new Error('command');
      }
    }
  }
};

export const MainMenuMessage = async (bot: TelegramBot, call: TelegramBot.CallbackQuery) =>
  await sendToUser({
    bot,
    call,
    message:
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–≥–æ –æ—Å–æ–±–æ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∑–æ–Ω–µ –¢–æ–º—Å–∫–∞. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º. –ù–∞—á–Ω–µ–º –Ω–∞—à–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≤–º–µ—Å—Ç–µ! üöÄ',
    keyboard: MainMenu(),
    photo: pathToImageFolder + '–û–±–ª–æ–∂–∫–∞.png'
  });
