import { PrismaClient } from '@prisma/client';
import TelegramBot from 'node-telegram-bot-api';

export type fromQuestionnarie = {
  from:
    | 'Booking'
    | 'Problem'
    | 'BecomeAResident'
    | 'Innovation'
    | 'BecomeANonResidentRenter'
    | 'EventRent';
};

export const sendNotification = async (
  bot: TelegramBot,
  prisma: PrismaClient,
  from: fromQuestionnarie
) => {
  let fromDefenition: string;
  switch (from.from) {
    case 'Booking': {
      fromDefenition = '–ó–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∏/–∑–∞–ª–∞ –æ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞';
      break;
    }
    case 'Problem': {
      fromDefenition = '–ó–∞—è–≤–∫–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ –û–≠–ó';
      break;
    }
    case 'BecomeAResident': {
      fromDefenition = '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞';
      break;
    }
    case 'BecomeANonResidentRenter': {
      fromDefenition = '–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º-–Ω–µ—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º';
      break;
    }
    case 'EventRent': {
      fromDefenition = '–ó–∞—è–≤–∫–∞ –æ–± –∞—Ä–µ–Ω–¥–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è';
      break;
    }
    case 'Innovation': {
      fromDefenition = '–ó–∞—è–≤–∫–∞ –æ —Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—Å–∫–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏';
      break;
    }
  }
  const supportAgents = await prisma.user.findMany({
    where: {
      role: 'SUPPORT'
    }
  });

  for (let i = 0; i < supportAgents.length; i++) {
    try {
      await bot.sendMessage(
        Number(supportAgents[i].telegramId),
        'üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞. –¢–µ–º–∞:\n' + fromDefenition
      );
    } catch (error) {
      continue;
    }
  }
};
