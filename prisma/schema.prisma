// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContactData {
  name String
  email String @unique
  phone String
  organization String?
  title String?

  user_telegramId BigInt @id
  user User @relation(fields: [user_telegramId], references: [telegramId])

}

model User {
  telegramId BigInt @id @db.BigInt
  username String
  full_name String
  role Role @default(UNREGISTERED)

  contact_data ContactData?
  problem_application ProblemApplication[]
  area_expectations_application AreaExpectationsApplication[]
  rented_area_requests_application RentedAreaRequestsApplication[]
  key_project_parameters_application KeyProjectParametersApplication?
  building_plans_application BuildingPlansApplication?
  booking_hall_application BookingHallApplication[]
  innovation_proposal_application InnovationProposalApplication[]
  questions QuestionsToSupport[] @relation("sender")
  
  support_questions QuestionsToSupport[] 
}

model Halls {
  id Int @default(autoincrement()) @id
  description String
  photo Bytes

  booking_hall_application BookingHallApplication[]
  area_expectation_application AreaExpectationsApplication[]
}

model ProblemApplication {
  problem_application_id Int @default(autoincrement()) @id
  problem_reason ProblemType
  problem_main String
  problem_adress String
  status Status

  problem_dispatch_date DateTime
  problem_approval_date DateTime?
  problem_support_id BigInt?

  user_telegramId BigInt 
  user User @relation(fields: [user_telegramId], references: [telegramId])
}

model AreaExpectationsApplication {
  event_application_id Int @default(autoincrement()) @id
  event_date_time String
  event_subject String
  event_visitors String  
  status Status

  event_dispatch_date DateTime
  event_approval_date DateTime?
  event_support_id BigInt?

  chosen_hall_id Int? 
  hall Halls? @relation(fields: [chosen_hall_id], references: [id])

  user_telegramId BigInt 
  user User @relation(fields: [user_telegramId], references: [telegramId])
}

model RentedAreaRequestsApplication {
  area_application_id Int @default(autoincrement()) @id
  area_type String
  area_premises String
  area_rental_start String
  status Status
  chosen_palace Palaces?
  sended_as RentSender

  area_dispatch_date DateTime
  area_approval_date DateTime?
  area_support_id BigInt?


  user_telegramId BigInt
  user User @relation(fields: [user_telegramId], references: [telegramId])
}

model KeyProjectParametersApplication {
  project_appliocation_id Int @default(autoincrement()) @id
  project_stage String
  project_crew String
  project_volume String
  status Status

  project_dispatch_date DateTime
  project_approval_date DateTime?
  project_support_id BigInt?

  user_telegramId BigInt @unique
  user User @relation(fields: [user_telegramId], references: [telegramId])
}

model BuildingPlansApplication {
  building_plan_id Int @default(autoincrement()) @id
  building_premises String
  building_start String
  status Status

  building_dispatch_date DateTime
  building_approval_date DateTime?
  building_support_id BigInt?

  user_telegramId BigInt @unique
  user User @relation(fields: [user_telegramId], references: [telegramId])
}

model BookingHallApplication {
  hall_application_id Int @default(autoincrement()) @id
  hall_date String
  hall_time String
  hall_period String
  hall_wish String
  status Status

  hall_dispatch_date DateTime
  hall_approval_date DateTime?
  hall_support_id BigInt?

  chosen_hall_id Int
  hall Halls @relation(fields: [chosen_hall_id], references: [id])

  user_telegramId BigInt 
  user User @relation(fields: [user_telegramId], references: [telegramId])
}

model InnovationProposalApplication {
  innovation_application_id Int @default(autoincrement()) @id
  innovation_main String
  innovation_idea String
  innovation_example String
  innovation_res String
  innovation_involve String
  status Status

  innovation_dispatch_date DateTime
  innovation_approval_date DateTime?
  innovation_support_id BigInt?

  user_telegramId BigInt 
  user User @relation(fields: [user_telegramId], references: [telegramId])
}

model QuestionsToSupport {
  message_id Int @id
  sender_id BigInt
  question_text String
  Status Status
  
  answer_text String?
  support_id BigInt?

  question_dispatch_date DateTime
  question_approval_date DateTime?

  support User? @relation(fields: [support_id], references: [telegramId])
  user User @relation(fields: [sender_id], references: [telegramId], name: "sender")
  messagesInSupportChats QuestionsChatIds[]
}

model QuestionsChatIds {
   message_id Int 
   message_support_chat_id BigInt 
   support_id BigInt 

  @@id([message_id, message_support_chat_id,support_id])
  question QuestionsToSupport @relation(fields: [message_id], references: [message_id])
}

enum Role {
  UNREGISTERED
  ADMIN
  SUPPORT
  RESIDENT
  EVENTRENTER
  EMPLOYEE
  NONRESIDENTRENTER
  GUEST
}

enum Status {
  Accepted
  Declined
  Pending
  Waiting
}

enum ProblemType {
  ELECTRICITY
  WATERSUPPLY
  HEATING
  COMMUNICATION
  OTHER
}

enum Palaces {
  CIT
  IC
  NVC
  EC
  EXPOCENTER
  ADMINISTRATIVE
}

enum RentSender {
  RESIDENT
  OTHER
}